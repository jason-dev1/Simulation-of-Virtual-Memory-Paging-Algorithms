{"version":3,"sources":["component/modal.jsx","component/header.jsx","component/table.jsx","component/tables.jsx","utils/randomRefStringGen.js","component/list.jsx","algorithms.js","App.js","index.js"],"names":["HelpModal","useState","show","setShow","handleClose","Button","variant","onClick","Modal","onHide","size","Header","closeButton","Title","Body","Footer","this","props","handleRefChange","handleFrameChange","handleResetTurnsChange","handleRefStringGenClick","handleSwapToggle","handleAnimationToggle","frameNumber","referenceInputTextField","resetTurns","animationToggle","swapToggle","handleDetailToggle","detailToggle","className","id","data-toggle","data-placement","title","type","name","placeholder","value","onChange","bind","ref","min","max","Component","Table","referenceString","algorithmLabel","algorithm","colorMap","pageInMemArray","pageFaults","pageNotInMemArray","referenceMapArray","frameNumberArray","_","range","map","r","right","f","index","get","Tables","algorithms","referenceMap","Map","set","a","key","refStringGen","result","previous","i","Math","floor","random","toString","substring","length","List","textProperty","handleListChange","selectedAlgorithm","href","firstInFirstOut","pageInMem","pageNotInMem","includes","push","pop","unshift","leastRecentlyUsed","splice","indexOf","notRecentlyUsed","forEach","e","j","secondChance","isReplace","notFrequentlyUsed","frequentMap","lowestCount","lowestCountHolder","count","aging","v","k","defaultProps","App","state","target","match","filteredReferenceString","split","filter","setState","tempReferenceStringInput","filteredAlgorithm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.644f2416.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Modal} from \"react-bootstrap\";\r\n\r\nexport function HelpModal() {\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary mr-2 mt-2\" onClick={handleShow}>\r\n                How To Use\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose} size=\"lg\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Basic Usage</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Reference String: Enter number [0-9] separated with ,<br/>\r\n                    Frame Number: Enter number [0-9]<br/>\r\n                    Reset Clock: For NRU, enter number [0-9]<br/>\r\n                    Generate String: Generate 16 random number<br/>\r\n                    Show/Hide swapped out memory: Choose to whether show/hide the swapped-out memory illustration<br/>\r\n                    Turn on/off animation: Toggle to turn on/off animation<br/>\r\n                    Show/Hide details: Toggle to show to details of every process<br/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n","import React, {Component} from \"react\";\r\nimport \"font-awesome/css/font-awesome.css\"\r\nimport {HelpModal} from \"./modal\";\r\n\r\nexport default class Header extends Component{\r\n    render() {\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick, handleSwapToggle,handleAnimationToggle, frameNumber, referenceInputTextField, resetTurns, animationToggle,swapToggle, handleDetailToggle, detailToggle} = this.props;\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron bg-transparent\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-5\">Simulation of Virtual Memory Paging</h1>\r\n                    <p className=\"lead\">Engineered by Jason</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"input-group mt-2\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Enter reference string 0~9 separated with ','\">Reference String</span>\r\n                </div>\r\n                <input type=\"text\" name = \"referenceInputTextField\"  className=\"form-control\" placeholder=\"Reference string [0-9] separated with ','\" value={referenceInputTextField} onChange={handleRefChange.bind(this)}/>\r\n            </div>\r\n            <div className=\"input-group mt-2\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Enter number 0~9\">Frame Number</span>\r\n                </div>\r\n                <input ref=\"frameNumber\" type=\"number\" min=\"1\" max=\"9\" className=\"form-control\" placeholder=\"Frame number [0-9]\" value={frameNumber} onChange={handleFrameChange.bind(this)}/>\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"For NRU, enter reset clock 0~9\">Reset Clock</span>\r\n                </div>\r\n                <input ref=\"resetTurns\" type=\"number\" min=\"1\" max=\"9\" className=\"form-control\" placeholder=\"Number of reset turns for NRU [0-9]\" value={resetTurns} onChange={handleResetTurnsChange.bind(this)}/>\r\n            </div>\r\n            <button type=\"button\" className={\"btn btn-danger mt-2 mr-2\"} onClick={handleRefStringGenClick}>Generate String</button>\r\n            <button type=\"button\" className={!swapToggle?\"btn btn-secondary mt-2 mr-2\":\"btn btn-outline-secondary mt-2 mr-2\"} onClick={handleSwapToggle}>{swapToggle?\"Hide swapped out memory\" : \"Show swapped out memory\"}</button>\r\n            <button type=\"button\" className={!animationToggle?\"btn btn-success mt-2 mr-2\":\"btn btn-outline-success mt-2 mr-2\"} onClick={handleAnimationToggle}>{animationToggle?\"Turn off animation\" : \"Turn on animation\"}</button>\r\n            <button type=\"button\" className={!detailToggle?\"btn btn-info mt-2 mr-2\":\"btn btn-outline-info mt-2 mr-2\"} onClick={handleDetailToggle}>{detailToggle?\"Hide details\" : \"Show details\"}</button>\r\n            <HelpModal/>\r\n        </div>\r\n    )\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\nimport _ from \"lodash\";\r\nimport Fade from 'react-reveal/Fade'\r\n\r\nexport default class Table extends Component{\r\n    render() {\r\n        let {referenceString, frameNumber, algorithmLabel, algorithm, colorMap, resetTurns, swapToggle, animationToggle, detailToggle} = this.props;\r\n        let {pageInMemArray, pageFaults, pageNotInMemArray, referenceMapArray} = algorithm(referenceString, frameNumber, resetTurns);\r\n        let frameNumberArray = _.range(0, frameNumber, 1);\r\n        return(\r\n            <div>\r\n                <label>{algorithmLabel + \":\"}</label>\r\n                <div className=\"table-responsive\">\r\n                <table className=\"table table-bordered table-sm table-custom-style\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>\r\n                                Reference:\r\n                            </th>\r\n                            {referenceString.map( r => (\r\n                                animationToggle?\r\n                                <Fade right>\r\n                                    <th className=\"table-cell-align-center\">{r}\r\n                                    </th>\r\n                                </Fade>\r\n                            : <th className=\"table-cell-align-center\">{r}\r\n                            </th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {frameNumberArray.map( f =>(\r\n                        <tr>\r\n                            <th />\r\n                            {pageInMemArray.map( (r,index) => (\r\n                                animationToggle?\r\n                                    <Fade right>\r\n                                        <th className={colorMap.get(r[f]) + \" table-cell-align-center\"}>\r\n                                            {r[f]}\r\n                                            {detailToggle?\r\n                                            <sub>\r\n                                                <sub>\r\n                                                    {(referenceMapArray[index]?\r\n                                                        referenceMapArray[index].get(r[f])\r\n                                                        : \"\")}\r\n                                                </sub>\r\n                                            </sub>\r\n                                                : \"\"}\r\n                                        </th>\r\n                                    </Fade>\r\n                            : <th className={colorMap.get(r[f]) + \" table-cell-align-center\"}>\r\n                                        {r[f]}\r\n                                        {detailToggle?\r\n                                            <sub>\r\n                                                <sub>\r\n                                                    {(referenceMapArray[index]?\r\n                                                        referenceMapArray[index].get(r[f])\r\n                                                        : \"\")}\r\n                                                </sub>\r\n                                            </sub>\r\n                                            : \"\"}\r\n                                    </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    {swapToggle ? frameNumberArray.map( f =>(\r\n                        <tr className=\"thead-light\">\r\n                            <th />\r\n                            {pageNotInMemArray.map( r => (\r\n                                animationToggle?\r\n                                <Fade right>\r\n                                    <th className=\"table-cell-align-center\">{r[f]}\r\n                                    </th>\r\n                                </Fade>\r\n                                    :<th className=\"table-cell-align-center\">{r[f]}</th>\r\n                            ))}\r\n                        </tr>\r\n                    )) : null}\r\n                    <tr className=\"thead-dark\">\r\n                        <th>Page Fault:</th>\r\n                        {pageFaults.map( f => (\r\n                            animationToggle?\r\n                            <Fade right>\r\n                                <th className=\"table-cell-align-center\">{f}\r\n                                </th>\r\n                            </Fade>\r\n                                :<th className=\"table-cell-align-center\">{f}</th>\r\n                        ))}\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport Table from \"./table\";\r\n\r\n\r\nexport default class Tables extends Component{\r\n    render(){\r\n        let {referenceString, frameNumber, resetTurns, swapToggle, animationToggle, algorithms, detailToggle} = this.props;\r\n        let referenceMap = new Map();\r\n        referenceMap.set(\"0\", \"table-primary\");\r\n        referenceMap.set(\"1\", \"table-secondary\");\r\n        referenceMap.set(\"2\", \"table-info\");\r\n        referenceMap.set(\"3\", \"table-warning\");\r\n        referenceMap.set(\"4\", \"table-danger\");\r\n        referenceMap.set(\"5\", \"table-success\");\r\n        referenceMap.set(\"6\", \"table-add-0\");\r\n        referenceMap.set(\"7\", \"table-add-1\");\r\n        referenceMap.set(\"8\", \"table-add-2\");\r\n        referenceMap.set(\"9\", \"table-add-3\");\r\n        return algorithms.map( a => <Table key={a['name']} colorMap={referenceMap} frameNumber={frameNumber} resetTurns={resetTurns} swapToggle={swapToggle} detailToggle={detailToggle} animationToggle={animationToggle} referenceString={referenceString} algorithmLabel={a['name']} algorithm={a['f']}/>);\r\n    }\r\n}","export function refStringGen(size, range){\r\n    let result = \"\";\r\n    let previous = 0;\r\n    let r = 0;\r\n    for (let i = 0; i < size ; i++){\r\n        do {\r\n            r = Math.floor(Math.random()*range);\r\n        }while(r === previous);\r\n        result = result + r.toString() + \",\";\r\n        previous = r;\r\n    }\r\n    result = result.substring(0, result.length-1);\r\n    return result;\r\n}","import React, {Component} from \"react\";\r\n\r\nexport default class List extends Component {\r\n    render(){\r\n        let {algorithms, textProperty, handleListChange, selectedAlgorithm} = this.props;\r\n        return(\r\n            <ul className=\"list-group\">\r\n            {algorithms.map(a=>\r\n                <a href=\"/#\" onClick={()=>handleListChange(a)} className={a['name'] === selectedAlgorithm['name']? \"list-group-item list-group-item-action active\" : \"list-group-item list-group-item-action\"}>{a[textProperty]}</a>) }\r\n            </ul>\r\n        )\r\n    }\r\n};\r\n\r\nList.defaultProps = {\r\n    textProperty: \"name\"\r\n}","import {floor} from \"lodash\";\r\n\r\nexport function firstInFirstOut(referenceString, frameNumber) {\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    let referenceMapArray = [];\r\n    for (let i = 0; i < referenceString.length; i++) {\r\n            //If the frames include the string, no page fault\r\n            if (pageInMem.includes(referenceString[i])) {\r\n                pageFaults.push('');\r\n            } else {\r\n                //Page fault occurs\r\n                pageFaults.push('F');\r\n                //If there is free frame\r\n                if (pageInMem.length < frameNumber) {\r\n                    //add to the top of the array\r\n                    pageInMem.unshift(referenceString[i]);\r\n                } else {\r\n                    if (pageNotInMem.length >= frameNumber) {\r\n                        pageNotInMem.pop();\r\n                    }\r\n                    pageNotInMem.unshift(pageInMem.pop());\r\n                    //insert the new page into the top of the array\r\n                    pageInMem.unshift(referenceString[i]);\r\n                }\r\n            }\r\n        pageInMemArray.push([...pageInMem]);\r\n        pageNotInMemArray.push([...pageNotInMem]);\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray, referenceMapArray};\r\n}\r\n\r\nexport function leastRecentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    let referenceMapArray = [];\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            pageInMem.splice(pageInMem.indexOf(referenceString[i]),1);\r\n            pageInMem.unshift(referenceString[i]);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n            else{\r\n                if (pageNotInMem.length >= frameNumber) {\r\n                    pageNotInMem.pop();\r\n                }\r\n                pageNotInMem.unshift(pageInMem.pop());\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n        }\r\n        pageInMemArray.push([...pageInMem]);\r\n        pageNotInMemArray.push([...pageNotInMem]);\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray, referenceMapArray};\r\n}\r\n\r\nexport function notRecentlyUsed(referenceString, frameNumber, resetTurns){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    let referenceMapArray = [];\r\n    referenceString.forEach( (e) => referenceMap.set(e,0));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (i%resetTurns === 0){\r\n            referenceString.forEach( (e) => referenceMap.set(e,0));//reset clock condition, reset all reference bit to 0\r\n        }\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            referenceMap.set(referenceString[i], 1);                //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n            else{\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j])===1){\r\n                        referenceMap.set(pageInMem[j], 0);          //second chance, reset reference bit to 0\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber) {\r\n                            pageNotInMem.pop();\r\n                        }\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        pageInMemArray.push([...pageInMem]);\r\n        pageNotInMemArray.push([...pageNotInMem]);\r\n        referenceMapArray.push(new Map(referenceMap));\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray, referenceMapArray};\r\n}\r\n\r\nexport function secondChance(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    let referenceMapArray = [];\r\n    let isReplace = false;\r\n    referenceString.forEach( (e) => referenceMap.set(e,0)); //initialize all reference bit to 0\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            referenceMap.set(referenceString[i], 1);        //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j]) === 1){\r\n                        referenceMap.set(pageInMem[j], 0);    //set reference bit to 0 (second chance)\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber)\r\n                            pageNotInMem.pop();\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        isReplace = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!isReplace){\r\n                    pageNotInMem.unshift(pageInMem.pop());\r\n                    pageInMem.unshift(referenceString[i]);\r\n                }\r\n            }\r\n        }\r\n        pageInMemArray.push([...pageInMem]);\r\n        pageNotInMemArray.push([...pageNotInMem]);\r\n        referenceMapArray.push(new Map(referenceMap));\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray, referenceMapArray};\r\n}\r\n\r\nexport function notFrequentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    let referenceMapArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));                                 //initialize counter as 0\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 1);  //increment counter\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){                     //find out the lowest count (victim)\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber) {\r\n                    pageNotInMem.pop();\r\n                }\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);    //replace the lowest count\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n        }\r\n        referenceMapArray.push(new Map(frequentMap));\r\n        pageInMemArray.push([...pageInMem]);\r\n        pageNotInMemArray.push([...pageNotInMem]);\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray, referenceMapArray};\r\n}\r\n\r\nexport function aging(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    let referenceMapArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));                      //initialize as 0\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            frequentMap.forEach( (v,k) => frequentMap.set(k, floor(v/2) ));     //divide by 2\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 256);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            frequentMap.forEach( (v,k) => frequentMap.set(k, floor(v/2) ));     //divide by 2\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber) {\r\n                    pageNotInMem.pop();\r\n                }\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);  //replace the lowest count\r\n                pageInMem.unshift(referenceString[i]);\r\n            }\r\n        }\r\n        referenceMapArray.push(new Map(frequentMap));\r\n        pageInMemArray.push([...pageInMem]);\r\n        pageNotInMemArray.push([...pageNotInMem]);\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray, referenceMapArray};\r\n}","import React, {Component} from 'react';\r\nimport Header from \"./component/header\";\r\nimport Tables from \"./component/tables\";\r\nimport {refStringGen} from \"./utils/randomRefStringGen\";\r\nimport \"font-awesome/css/font-awesome.css\"\r\nimport List from \"./component/list\";\r\nimport {\r\n    aging,\r\n    firstInFirstOut,\r\n    leastRecentlyUsed,\r\n    notFrequentlyUsed,\r\n    notRecentlyUsed,\r\n    secondChance\r\n} from \"./algorithms\";\r\n\r\nclass App extends Component{\r\n    state = {\r\n        referenceInputTextField : \"0,2,3,1,2,1,4,5,6,2,4,5,3,2,3,8,5,7,2,0,6,4,1,9\",\r\n        referenceString : [\"0\", \"2\", \"3\", \"1\", \"2\", \"1\", \"4\", \"5\", \"6\", \"2\", \"4\", \"5\", \"3\", \"2\", \"3\", \"8\", \"5\", \"7\", \"2\", \"0\", \"6\", \"4\", \"1\", \"9\"],\r\n        frameNumber : 4,\r\n        resetTurns: 4,\r\n        swapToggle: false,\r\n        animationToggle: true,\r\n        detailToggle: false,\r\n        selectedAlgorithm: {name: \"Show All\"},\r\n    }\r\n\r\n    handleRefChange = ({target}) => {\r\n        let {value} = target;\r\n        if (value.match(/^$|^[0-9,]+$/) && !value.match(/,,+,*|[0-9][0-9]+[0-9]*/g)) {\r\n                let tempReferenceString = [...value.split(\",\")];\r\n                let filteredReferenceString = tempReferenceString.filter((value) => value !== \"\");\r\n                this.setState({referenceInputTextField: value, referenceString: filteredReferenceString});\r\n        }\r\n    }\r\n\r\n    handleFrameChange = ({target}) =>{\r\n        if(target.value < 10)\r\n            this.setState({frameNumber: target.value});\r\n    }\r\n\r\n    handleResetTurnsChange = ({target}) => {\r\n        if (target.value < 10)\r\n            this.setState({resetTurns: target.value});\r\n    }\r\n\r\n    handleSwapToggle = () => {\r\n        this.setState({swapToggle: !this.state.swapToggle});\r\n    }\r\n\r\n    handleRefStringGenClick = () => {\r\n        let tempReferenceStringInput =  refStringGen(24,9);\r\n        let tempReferenceString = [...tempReferenceStringInput.split(\",\")];\r\n        let filteredReferenceString = tempReferenceString.filter((value) => value !== \"\");\r\n        this.setState({referenceInputTextField: tempReferenceStringInput, referenceString: filteredReferenceString});\r\n    }\r\n\r\n    handleAnimationToggle = () =>{\r\n        this.setState({animationToggle: !this.state.animationToggle});\r\n    }\r\n\r\n    handleDetailToggle = () =>{\r\n        this.setState({detailToggle: !this.state.detailToggle});\r\n    }\r\n\r\n    handleListChange = (algorithm) => {\r\n        this.setState({selectedAlgorithm:algorithm});\r\n    }\r\n\r\n\r\n    render() {\r\n        let {frameNumber, resetTurns, referenceString, referenceInputTextField, swapToggle, animationToggle, detailToggle, selectedAlgorithm} = this.state;\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick, handleAnimationToggle, handleSwapToggle, handleListChange, handleDetailToggle} = this;\r\n        const algorithms = [\r\n            {name : \"Show All\"},\r\n            {name : \"First In First Out\", f : firstInFirstOut},\r\n            {name : \"Second Chance\", f : secondChance},\r\n            {name : \"Least Recently Used\", f : leastRecentlyUsed},\r\n            {name : \"Not Recently Used\", f : notRecentlyUsed},\r\n            {name : \"Not Frequently Used\", f : notFrequentlyUsed},\r\n            {name : \"Aging (8 bits counter)\", f : aging}]\r\n        const filteredAlgorithm = selectedAlgorithm && selectedAlgorithm['f']? algorithms.filter(a => a['name'] === selectedAlgorithm['name']) : algorithms.filter(a=> a['name'] !== \"Show All\");\r\n        return (\r\n            <main className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <Header\r\n                            handleRefChange={handleRefChange}\r\n                            handleFrameChange={handleFrameChange}\r\n                            handleResetTurnsChange={handleResetTurnsChange}\r\n                            handleRefStringGenClick={handleRefStringGenClick}\r\n                            handleSwapToggle={handleSwapToggle}\r\n                            handleAnimationToggle={handleAnimationToggle}\r\n                            handleDetailToggle={handleDetailToggle}\r\n                            detailToggle={detailToggle}\r\n                            frameNumber={frameNumber}\r\n                            resetTurns={resetTurns}\r\n                            referenceInputTextField={referenceInputTextField}\r\n                            animationToggle={animationToggle}\r\n                            swapToggle={swapToggle}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-3 mt-2 list-group-outer-padding\">\r\n                        <List algorithms={algorithms} handleListChange={handleListChange} selectedAlgorithm={selectedAlgorithm}/>\r\n                    </div>\r\n                </div>\r\n                    <div>\r\n                        <Tables\r\n                        frameNumber={frameNumber}\r\n                        resetTurns={resetTurns}\r\n                        referenceString={referenceString}\r\n                        swapToggle={swapToggle}\r\n                        animationToggle={animationToggle}\r\n                        detailToggle={detailToggle}\r\n                        algorithms={filteredAlgorithm}\r\n                    />\r\n                    </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/custom-style.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n        <App />,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}