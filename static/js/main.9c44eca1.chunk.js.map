{"version":3,"sources":["Component/header.jsx","Component/table.jsx","algorithms.js","Component/tables.jsx","randomRefStringGen.js","App.js","index.js"],"names":["Header","this","props","handleRefChange","handleFrameChange","handleResetTurnsChange","handleRefStringGenClick","frameNumber","referenceInputTextField","resetTurns","className","id","type","name","placeholder","value","onChange","bind","ref","min","max","onClick","Component","Table","referenceString","algorithmLabel","algorithm","colorMap","pageInMemArray","pageFaults","pageNotInMemArray","frameNumberArray","_","range","htmlFor","map","r","right","f","get","firstInFirstOut","pageInMem","pageNotInMem","i","length","includes","push","pageInMemClone","pageNotInMemClone","unshift","pop","console","log","leastRecentlyUsed","splice","indexOf","notRecentlyUsed","referenceMap","Map","forEach","e","set","j","secondChance","notFrequentlyUsed","frequentMap","lowestCount","lowestCountHolder","count","aging","v","k","floor","Tables","state","algorithms","a","key","refStringGen","size","result","Math","random","toString","substring","App","target","match","filteredReferenceString","split","filter","index","array","setState","tempReferenceStringInput","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c44eca1.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\n\r\nexport default class Header extends Component{\r\n\r\n    render() {\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick, frameNumber, referenceInputTextField, resetTurns} = this.props;\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron bg-transparent\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-5\">Simulation of Virtual Memory Paging Algorithms</h1>\r\n                    <p className=\"lead\">Created by Jason. </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"input-group  mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\">Reference String</span>\r\n                </div>\r\n                <input type=\"text\" name = \"referenceInputTextField\"  className=\"form-control\" placeholder=\"Please enter reference string [0-9] separated with ','\" value={referenceInputTextField} onChange={handleRefChange.bind(this)}/>\r\n            </div>\r\n            <div className=\"input-group  mb-1\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\">Frame Number</span>\r\n                </div>\r\n                <input ref=\"frameNumber\" type=\"number\" min=\"1\" max=\"5\" className=\"form-control\" placeholder=\"Please enter frame number\" value={frameNumber} onChange={handleFrameChange.bind(this)}/>\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\">Reset Turn(s)</span>\r\n                </div>\r\n                <input ref=\"resetTurns\" type=\"number\" min=\"1\" max=\"10\" className=\"form-control\" placeholder=\"Please enter the number of reset turns for NFU\" value={resetTurns} onChange={handleResetTurnsChange.bind(this)}/>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary mb-3\" onClick={handleRefStringGenClick}>Generate String</button>\r\n        </div>\r\n    )\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\nimport _ from \"lodash\";\r\nimport Fade from 'react-reveal/Fade'\r\n\r\nexport default class Table extends Component{\r\n    render() {\r\n        let {referenceString, frameNumber, algorithmLabel, algorithm, colorMap, resetTurns} = this.props;\r\n        let {pageInMemArray, pageFaults, pageNotInMemArray} = algorithm(referenceString, frameNumber, resetTurns);\r\n        let frameNumberArray = _.range(0, frameNumber, 1);\r\n        return(\r\n            <div>\r\n                <label htmlFor=\"basic-url\">{algorithmLabel}</label>\r\n                <table className=\"table table-bordered table-sm\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Reference:</th>\r\n                            {referenceString.map( r => (\r\n                                <Fade right><th>{r}</th></Fade>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {frameNumberArray.map( f =>(\r\n                        <tr>\r\n                            <th />\r\n                            {pageInMemArray.map( r => (\r\n                                <Fade right><th className={colorMap.get(r[f])}>{r[f]}</th></Fade>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    {frameNumberArray.map( f =>(\r\n                        <tr className=\"thead-light\">\r\n                            <th />\r\n                            {pageNotInMemArray.map( r => (\r\n                                <Fade right><th>{r[f]}</th></Fade>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    <tr className=\"thead-dark\">\r\n                        <th>Page Fault:</th>\r\n                        {pageFaults.map( f => (\r\n                            <Fade right><th>{f}</th></Fade>\r\n                        ))}\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import {floor} from \"lodash\";\r\n\r\nexport function firstInFirstOut(referenceString, frameNumber) {\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    for (let i = 0; i < referenceString.length; i++) {\r\n            if (pageInMem.includes(referenceString[i])) {\r\n                pageFaults.push('');                                //No page faults\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);                           //keep no changes\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            } else {\r\n                pageFaults.push('F');                               //Page faults occurs\r\n                if (pageInMem.length < frameNumber) {\r\n                    pageInMem.unshift(referenceString[i]);          //add to the top of the array\r\n                    const pageInMemClone = [...pageInMem];\r\n                    pageInMemArray.push(pageInMemClone);\r\n                    const pageNotInMemClone = [...pageNotInMem];\r\n                    pageNotInMemArray.push(pageNotInMemClone);\r\n                } else {\r\n                    //page replacement algorithm here\r\n                    if (pageNotInMem.length >= frameNumber)\r\n                        pageNotInMem.pop();\r\n                    pageNotInMem.unshift(pageInMem.pop());          //remove the last(oldest) page}\r\n                    pageInMem.unshift(referenceString[i]);           //insert the new page into the top of the array\r\n                    const pageInMemClone = [...pageInMem];\r\n                    pageInMemArray.push(pageInMemClone);                        //insert output into 2d array\r\n                    const pageNotInMemClone = [...pageNotInMem];\r\n                    pageNotInMemArray.push(pageNotInMemClone);\r\n                }\r\n            }\r\n    }\r\n    console.log(pageNotInMemArray);\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function leastRecentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            pageInMem.splice(pageInMem.indexOf(referenceString[i]),1);\r\n            pageInMem.unshift(referenceString[i]);\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.pop());\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    console.log(pageNotInMemArray);\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function notRecentlyUsed(referenceString, frameNumber, resetTurns){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => referenceMap.set(e,false));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (i%resetTurns === 0){\r\n            referenceString.forEach( (e) => referenceMap.set(e,false));\r\n        }\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            referenceMap.set(referenceString[i], true);  //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j])===true){\r\n                        referenceMap.set(pageInMem[j], false);    //set reference bit to 0 (second chance)\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber)\r\n                            pageNotInMem.pop();\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        break;\r\n                    }\r\n                }\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    console.log(pageNotInMemArray);\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function secondChance(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => referenceMap.set(e,false));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            referenceMap.set(referenceString[i], true);  //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j])===true){\r\n                        referenceMap.set(pageInMem[j], false);    //set reference bit to 0 (second chance)\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber)\r\n                            pageNotInMem.pop();\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        break;\r\n                    }\r\n                }\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    console.log(pageNotInMemArray);\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function notFrequentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);;\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 1);  //add counter\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n\r\n    }\r\n    console.log(pageNotInMemArray);\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function aging(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            frequentMap.forEach( (v,k,map) => frequentMap.set(k, floor(v/2) ));\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 256);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            frequentMap.forEach( (v,k,map) => frequentMap.set(k, floor(v/2) ));\r\n\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    console.log(pageNotInMemArray);\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}","import React, {Component} from \"react\";\r\nimport Table from \"./table\";\r\nimport {firstInFirstOut, notRecentlyUsed, aging , notFrequentlyUsed, secondChance, leastRecentlyUsed} from \"../algorithms\";\r\n\r\n\r\nexport default class Tables extends Component{\r\n    state ={\r\n        algorithms : [\r\n            {name : \"First In First Out: \", f : firstInFirstOut},\r\n            {name : \"Least Recently Used: \", f : leastRecentlyUsed},\r\n            {name : \"Aging: \", f : aging},\r\n            {name : \"Not Frequently Used: \", f : notFrequentlyUsed},\r\n            {name : \"Second Chance: \", f : secondChance},\r\n            {name : \"Not Recently Used: \", f : notRecentlyUsed}]\r\n    }\r\n    render(){\r\n        let {referenceString, frameNumber, resetTurns} = this.props;\r\n        let referenceMap = new Map();\r\n        referenceMap.set(\"0\", \"table-primary\");\r\n        referenceMap.set(\"1\", \"table-secondary\");\r\n        referenceMap.set(\"2\", \"table-info\");\r\n        referenceMap.set(\"3\", \"table-warning\");\r\n        referenceMap.set(\"4\", \"table-danger\");\r\n        referenceMap.set(\"5\", \"table-success\");\r\n        referenceMap.set(\"6\", \"table-add-0\");\r\n        referenceMap.set(\"7\", \"table-add-1\");\r\n        referenceMap.set(\"8\", \"table-add-2\");\r\n        referenceMap.set(\"9\", \"table-add-3\");\r\n        return this.state.algorithms.map( a => <Table key={a['name']} colorMap={referenceMap} frameNumber={frameNumber} resetTurns={resetTurns} referenceString={referenceString} algorithmLabel={a['name']} algorithm={a['f']}/>);\r\n    }\r\n}","export function refStringGen(size, range){\r\n    let result = \"\";\r\n    for (let i = 0; i < size ; i++){\r\n        let r = Math.floor((Math.random()*range)).toString();\r\n        result = result + r + \",\";\r\n    }\r\n    result = result.substring(0, result.length-1);\r\n    return result;\r\n}","import React, {Component} from 'react';\r\nimport Header from \"./Component/header\";\r\nimport Tables from \"./Component/tables\";\r\nimport {refStringGen} from \"./randomRefStringGen\";\r\n\r\n/*\r\nTODO: Algorithms chooser\r\n      Animation enabler\r\n      Algorithm Information\r\n      Outside the box (memory swapped out)\r\n      Table font\r\n*/\r\nclass App extends Component{\r\n    state = {\r\n        referenceInputTextField : \"0,2,3,1,2,1,4,5,6,2,4,5,3,2,3,8,5,7,2,0,6,4,1,8\",\r\n        referenceString : [\"0\", \"2\", \"3\", \"1\", \"2\", \"1\", \"4\", \"5\", \"6\", \"2\", \"4\", \"5\", \"3\", \"2\", \"3\", \"8\", \"5\", \"7\", \"2\", \"0\", \"6\", \"4\", \"1\", \"9\"],\r\n        frameNumber : 4,\r\n        resetTurns: 4\r\n    }\r\n\r\n    handleRefChange = ({target}) => {\r\n        let {value} = target;\r\n        if (value.match(/^$|^[0-9,]+$/) && !value.match(/,,+,*|[0-9][0-9]+[0-9]*/g)) {\r\n                let tempReferenceString = [...value.split(\",\")];\r\n                let filteredReferenceString = tempReferenceString.filter((value, index, array) => value !== \"\");\r\n                this.setState({referenceInputTextField: value, referenceString: filteredReferenceString});\r\n        }\r\n    }\r\n\r\n    handleFrameChange = ({target}) =>{\r\n        if(target.value < 10)\r\n            this.setState({frameNumber: target.value});\r\n    }\r\n\r\n    handleResetTurnsChange = ({target}) => {\r\n        if (target.value < 10)\r\n            this.setState({resetTurns: target.value});\r\n    }\r\n\r\n    handleRefStringGenClick = () => {\r\n        let tempReferenceStringInput =  refStringGen(30,9);\r\n        let tempReferenceString = [...tempReferenceStringInput.split(\",\")];\r\n        let filteredReferenceString = tempReferenceString.filter((value, index, array) => value !== \"\");\r\n        this.setState({referenceInputTextField: tempReferenceStringInput, referenceString: filteredReferenceString});\r\n    }\r\n\r\n    render() {\r\n        let {frameNumber, resetTurns, referenceString, referenceInputTextField} = this.state;\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick} = this;\r\n        return (\r\n            <main className=\"container\">\r\n                <React.Fragment>\r\n                    <Header\r\n                        handleRefChange={handleRefChange}\r\n                        handleFrameChange={handleFrameChange}\r\n                        handleResetTurnsChange={handleResetTurnsChange}\r\n                        handleRefStringGenClick={handleRefStringGenClick}\r\n                        frameNumber={frameNumber}\r\n                        resetTurns={resetTurns}\r\n                        referenceInputTextField={referenceInputTextField}\r\n                    />\r\n                    <Tables\r\n                        frameNumber={frameNumber}\r\n                        resetTurns={resetTurns}\r\n                        referenceString={referenceString}\r\n                    />\r\n                </React.Fragment>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './CSS/addcolorstyle.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n        <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}