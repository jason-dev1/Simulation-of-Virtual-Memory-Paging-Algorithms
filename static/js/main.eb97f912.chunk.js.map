{"version":3,"sources":["component/header.jsx","component/table.jsx","algorithms.js","component/tables.jsx","utils/randomRefStringGen.js","App.js","index.js"],"names":["Header","this","props","handleRefChange","handleFrameChange","handleResetTurnsChange","handleRefStringGenClick","handleSwapToggle","handleAnimationToggle","frameNumber","referenceInputTextField","resetTurns","animationToggle","swapToggle","className","id","data-toggle","data-placement","title","type","name","placeholder","value","onChange","bind","ref","min","max","onClick","Component","Table","referenceString","algorithmLabel","algorithm","colorMap","pageInMemArray","pageFaults","pageNotInMemArray","frameNumberArray","_","range","htmlFor","map","r","right","f","get","firstInFirstOut","pageInMem","pageNotInMem","i","length","includes","push","pageInMemClone","pageNotInMemClone","unshift","pop","leastRecentlyUsed","splice","indexOf","notRecentlyUsed","referenceMap","Map","forEach","e","set","j","secondChance","notFrequentlyUsed","frequentMap","lowestCount","lowestCountHolder","count","aging","v","k","floor","Tables","state","algorithms","a","key","refStringGen","size","result","Math","random","toString","substring","App","target","match","filteredReferenceString","split","filter","index","array","setState","tempReferenceStringInput","Fragment","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb97f912.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport \"font-awesome/css/font-awesome.css\"\r\n//import {Example} from \"./modal\";\r\n\r\nexport default class Header extends Component{\r\n    render() {\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick, handleSwapToggle,handleAnimationToggle, frameNumber, referenceInputTextField, resetTurns, animationToggle,swapToggle} = this.props;\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron bg-transparent\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-5\">Simulation of Virtual Memory Paging Algorithms</h1>\r\n                    <p className=\"lead\">Created By: Jason</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"input-group mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Enter reference string 0~9 separated with ','\">Reference String</span>\r\n                </div>\r\n                <input type=\"text\" name = \"referenceInputTextField\"  className=\"form-control\" placeholder=\"Please enter reference string [0-9] separated with ','\" value={referenceInputTextField} onChange={handleRefChange.bind(this)}/>\r\n            </div>\r\n            <div className=\"input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Enter number 0~9\">Frame Number</span>\r\n                </div>\r\n                <input ref=\"frameNumber\" type=\"number\" min=\"1\" max=\"9\" className=\"form-control\" placeholder=\"Please enter frame number [0-9]\" value={frameNumber} onChange={handleFrameChange.bind(this)}/>\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"For NFU, enter reset clock 0~9\">Reset Clock</span>\r\n                </div>\r\n                <input ref=\"resetTurns\" type=\"number\" min=\"1\" max=\"9\" className=\"form-control\" placeholder=\"Please enter the number of reset turns for NFU [0-9]\" value={resetTurns} onChange={handleResetTurnsChange.bind(this)}/>\r\n            </div>\r\n            <button type=\"button\" className={\"btn btn-danger\"} onClick={handleRefStringGenClick}>Generate String</button>\r\n            <button type=\"button\" className={!swapToggle?\"btn btn-secondary m-2\":\"btn btn-outline-secondary m-2\"} onClick={handleSwapToggle}>{swapToggle?\"Hide swapped out memory\" : \"Show swapped out memory\"}</button>\r\n            <button type=\"button\" className={!animationToggle?\"btn btn-info\":\"btn btn-outline-info\"} onClick={handleAnimationToggle}>{animationToggle?\"Turn off animation\" : \"Turn on animation\"}</button>\r\n        </div>\r\n    )\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\nimport _ from \"lodash\";\r\nimport Fade from 'react-reveal/Fade'\r\n\r\nexport default class Table extends Component{\r\n    render() {\r\n        let {referenceString, frameNumber, algorithmLabel, algorithm, colorMap, resetTurns, swapToggle, animationToggle} = this.props;\r\n        let {pageInMemArray, pageFaults, pageNotInMemArray} = algorithm(referenceString, frameNumber, resetTurns);\r\n        let frameNumberArray = _.range(0, frameNumber, 1);\r\n        return(\r\n            <div>\r\n                <label htmlFor=\"basic-url\">{algorithmLabel}</label>\r\n                <table className=\"table table-bordered table-sm table-custom-style\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Reference:</th>\r\n                            {referenceString.map( r => (\r\n                                animationToggle?\r\n                                <Fade right><th className=\"table-cell-align-center\">{r}</th></Fade>\r\n                            : <th className=\"table-cell-align-center\">{r}</th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {frameNumberArray.map( f =>(\r\n                        <tr>\r\n                            <th />\r\n                            {pageInMemArray.map( r => (\r\n                                animationToggle?\r\n                                <Fade right><th className={colorMap.get(r[f]) + \" table-cell-align-center\"}>{r[f]}</th></Fade>\r\n                            : <th className={colorMap.get(r[f]) + \" table-cell-align-center\"}>{r[f]}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    {swapToggle ? frameNumberArray.map( f =>(\r\n                        <tr className=\"thead-light\">\r\n                            <th />\r\n                            {pageNotInMemArray.map( r => (\r\n                                animationToggle?\r\n                                <Fade right><th className=\"table-cell-align-center\">{r[f]}</th></Fade>\r\n                                    :<th className=\"table-cell-align-center\">{r[f]}</th>\r\n                            ))}\r\n                        </tr>\r\n                    )) : null}\r\n                    <tr className=\"thead-dark\">\r\n                        <th>Page Fault:</th>\r\n                        {pageFaults.map( f => (\r\n                            animationToggle?\r\n                            <Fade right><th className=\"table-cell-align-center\">{f}</th></Fade>\r\n                                :<th className=\"table-cell-align-center\">{f}</th>\r\n                        ))}\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import {floor} from \"lodash\";\r\n\r\nexport function firstInFirstOut(referenceString, frameNumber) {\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    for (let i = 0; i < referenceString.length; i++) {\r\n            if (pageInMem.includes(referenceString[i])) {\r\n                pageFaults.push('');                                //No page faults\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);                           //keep no changes\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            } else {\r\n                pageFaults.push('F');                               //Page faults occurs\r\n                if (pageInMem.length < frameNumber) {\r\n                    pageInMem.unshift(referenceString[i]);          //add to the top of the array\r\n                    const pageInMemClone = [...pageInMem];\r\n                    pageInMemArray.push(pageInMemClone);\r\n                    const pageNotInMemClone = [...pageNotInMem];\r\n                    pageNotInMemArray.push(pageNotInMemClone);\r\n                } else {\r\n                    //page replacement algorithm here\r\n                    if (pageNotInMem.length >= frameNumber)\r\n                        pageNotInMem.pop();\r\n                    pageNotInMem.unshift(pageInMem.pop());          //remove the last(oldest) page}\r\n                    pageInMem.unshift(referenceString[i]);           //insert the new page into the top of the array\r\n                    const pageInMemClone = [...pageInMem];\r\n                    pageInMemArray.push(pageInMemClone);                        //insert output into 2d array\r\n                    const pageNotInMemClone = [...pageNotInMem];\r\n                    pageNotInMemArray.push(pageNotInMemClone);\r\n                }\r\n            }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function leastRecentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            pageInMem.splice(pageInMem.indexOf(referenceString[i]),1);\r\n            pageInMem.unshift(referenceString[i]);\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.pop());\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function notRecentlyUsed(referenceString, frameNumber, resetTurns){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => referenceMap.set(e,false));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (i%resetTurns === 0){\r\n            referenceString.forEach( (e) => referenceMap.set(e,false));\r\n        }\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            referenceMap.set(referenceString[i], true);  //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j])===true){\r\n                        referenceMap.set(pageInMem[j], false);    //set reference bit to 0 (second chance)\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber)\r\n                            pageNotInMem.pop();\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        break;\r\n                    }\r\n                }\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function secondChance(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => referenceMap.set(e,false));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            referenceMap.set(referenceString[i], true);  //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j])===true){\r\n                        referenceMap.set(pageInMem[j], false);    //set reference bit to 0 (second chance)\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber)\r\n                            pageNotInMem.pop();\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        break;\r\n                    }\r\n                }\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function notFrequentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);;\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 1);  //add counter\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function aging(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            frequentMap.forEach( (v,k,map) => frequentMap.set(k, floor(v/2) ));\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 256);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            frequentMap.forEach( (v,k,map) => frequentMap.set(k, floor(v/2) ));\r\n\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}","import React, {Component} from \"react\";\r\nimport Table from \"./table\";\r\nimport {firstInFirstOut, notRecentlyUsed, aging , notFrequentlyUsed, secondChance, leastRecentlyUsed} from \"../algorithms\";\r\n\r\n\r\nexport default class Tables extends Component{\r\n    state ={\r\n        algorithms : [\r\n            {name : \"First In First Out: \", f : firstInFirstOut},\r\n            {name : \"Second Chance: \", f : secondChance},\r\n            {name : \"Least Recently Used: \", f : leastRecentlyUsed},\r\n            {name : \"Not Recently Used: \", f : notRecentlyUsed},\r\n            {name : \"Not Frequently Used: \", f : notFrequentlyUsed},\r\n            {name : \"Aging: \", f : aging}]\r\n    }\r\n    render(){\r\n        let {referenceString, frameNumber, resetTurns, swapToggle, animationToggle} = this.props;\r\n        let referenceMap = new Map();\r\n        referenceMap.set(\"0\", \"table-primary\");\r\n        referenceMap.set(\"1\", \"table-secondary\");\r\n        referenceMap.set(\"2\", \"table-info\");\r\n        referenceMap.set(\"3\", \"table-warning\");\r\n        referenceMap.set(\"4\", \"table-danger\");\r\n        referenceMap.set(\"5\", \"table-success\");\r\n        referenceMap.set(\"6\", \"table-add-0\");\r\n        referenceMap.set(\"7\", \"table-add-1\");\r\n        referenceMap.set(\"8\", \"table-add-2\");\r\n        referenceMap.set(\"9\", \"table-add-3\");\r\n        return this.state.algorithms.map( a => <Table key={a['name']} colorMap={referenceMap} frameNumber={frameNumber} resetTurns={resetTurns} swapToggle={swapToggle} animationToggle={animationToggle} referenceString={referenceString} algorithmLabel={a['name']} algorithm={a['f']}/>);\r\n    }\r\n}","export function refStringGen(size, range){\r\n    let result = \"\";\r\n    for (let i = 0; i < size ; i++){\r\n        let r = Math.floor((Math.random()*range)).toString();\r\n        result = result + r + \",\";\r\n    }\r\n    result = result.substring(0, result.length-1);\r\n    return result;\r\n}","import React, {Component} from 'react';\r\nimport Header from \"./component/header\";\r\nimport Tables from \"./component/tables\";\r\nimport {refStringGen} from \"./utils/randomRefStringGen\";\r\nimport \"font-awesome/css/font-awesome.css\"\r\n\r\nclass App extends Component{\r\n    state = {\r\n        referenceInputTextField : \"0,2,3,1,2,1,4,5,6,2,4,5,3,2,3,8,5,7,2,0,6,4,1,9\",\r\n        referenceString : [\"0\", \"2\", \"3\", \"1\", \"2\", \"1\", \"4\", \"5\", \"6\", \"2\", \"4\", \"5\", \"3\", \"2\", \"3\", \"8\", \"5\", \"7\", \"2\", \"0\", \"6\", \"4\", \"1\", \"9\"],\r\n        frameNumber : 4,\r\n        resetTurns: 4,\r\n        swapToggle: false,\r\n        animationToggle: true\r\n    }\r\n\r\n    handleRefChange = ({target}) => {\r\n        let {value} = target;\r\n        if (value.match(/^$|^[0-9,]+$/) && !value.match(/,,+,*|[0-9][0-9]+[0-9]*/g)) {\r\n                let tempReferenceString = [...value.split(\",\")];\r\n                let filteredReferenceString = tempReferenceString.filter((value, index, array) => value !== \"\");\r\n                this.setState({referenceInputTextField: value, referenceString: filteredReferenceString});\r\n        }\r\n    }\r\n\r\n    handleFrameChange = ({target}) =>{\r\n        if(target.value < 10)\r\n            this.setState({frameNumber: target.value});\r\n    }\r\n\r\n    handleResetTurnsChange = ({target}) => {\r\n        if (target.value < 10)\r\n            this.setState({resetTurns: target.value});\r\n    }\r\n\r\n    handleSwapToggle = () => {\r\n        this.setState({swapToggle: !this.state.swapToggle});\r\n    }\r\n\r\n    handleRefStringGenClick = () => {\r\n        let tempReferenceStringInput =  refStringGen(24,9);\r\n        let tempReferenceString = [...tempReferenceStringInput.split(\",\")];\r\n        let filteredReferenceString = tempReferenceString.filter((value, index, array) => value !== \"\");\r\n        this.setState({referenceInputTextField: tempReferenceStringInput, referenceString: filteredReferenceString});\r\n    }\r\n\r\n    handleAnimationToggle = () =>{\r\n        this.setState({animationToggle: !this.state.animationToggle});\r\n    }\r\n\r\n    render() {\r\n        let {frameNumber, resetTurns, referenceString, referenceInputTextField, swapToggle, animationToggle} = this.state;\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick, handleAnimationToggle, handleSwapToggle} = this;\r\n        return (\r\n            <main className=\"container\">\r\n                <React.Fragment>\r\n                    <Header\r\n                        handleRefChange={handleRefChange}\r\n                        handleFrameChange={handleFrameChange}\r\n                        handleResetTurnsChange={handleResetTurnsChange}\r\n                        handleRefStringGenClick={handleRefStringGenClick}\r\n                        handleSwapToggle={handleSwapToggle}\r\n                        handleAnimationToggle={handleAnimationToggle}\r\n                        frameNumber={frameNumber}\r\n                        resetTurns={resetTurns}\r\n                        referenceInputTextField={referenceInputTextField}\r\n                        animationToggle={animationToggle}\r\n                        swapToggle={swapToggle}\r\n                    />\r\n                    <Tables\r\n                        frameNumber={frameNumber}\r\n                        resetTurns={resetTurns}\r\n                        referenceString={referenceString}\r\n                        swapToggle={swapToggle}\r\n                        animationToggle={animationToggle}\r\n                    />\r\n                </React.Fragment>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/custom-style.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n        <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}