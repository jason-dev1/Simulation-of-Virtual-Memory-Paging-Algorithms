{"version":3,"sources":["component/modal.jsx","component/header.jsx","component/table.jsx","component/tables.jsx","utils/randomRefStringGen.js","component/list.jsx","algorithms.js","App.js","index.js"],"names":["HelpModal","useState","show","setShow","handleClose","Button","variant","onClick","Modal","onHide","size","Header","closeButton","Title","Body","Footer","this","props","handleRefChange","handleFrameChange","handleResetTurnsChange","handleRefStringGenClick","handleSwapToggle","handleAnimationToggle","frameNumber","referenceInputTextField","resetTurns","animationToggle","swapToggle","className","id","data-toggle","data-placement","title","type","name","placeholder","value","onChange","bind","ref","min","max","Component","Table","referenceString","algorithmLabel","algorithm","colorMap","pageInMemArray","pageFaults","pageNotInMemArray","frameNumberArray","_","range","map","r","right","f","get","Tables","algorithms","referenceMap","Map","set","a","key","refStringGen","result","i","Math","floor","random","toString","substring","length","List","textProperty","handleListChange","selectedAlgorithm","href","firstInFirstOut","pageInMem","pageNotInMem","includes","push","pageInMemClone","pageNotInMemClone","unshift","pop","leastRecentlyUsed","splice","indexOf","notRecentlyUsed","forEach","e","j","secondChance","notFrequentlyUsed","frequentMap","lowestCount","lowestCountHolder","count","aging","v","k","defaultProps","App","state","target","match","filteredReferenceString","split","filter","index","array","setState","tempReferenceStringInput","filteredAlgorithm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa813944.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Modal} from \"react-bootstrap\";\r\n\r\nexport function HelpModal() {\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                How To Use\r\n            </Button>\r\n            <Modal show={show} onHide={handleClose} size=\"lg\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Basic Usage</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Reference String: Enter number [0-9] separated with ,<br/>\r\n                    Frame Number: Enter number [0-9]<br/>\r\n                    Reset Clock: For NRU, enter number [0-9]<br/>\r\n                    Generate String: Generate 16 random number<br/>\r\n                    Show/Hide swapped out memory: Choose to whether show/hide the swapped out memory illustration<br/>\r\n                    Turn on/off animation: Toggle to turn on/off animation<br/>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n","import React, {Component} from \"react\";\r\nimport \"font-awesome/css/font-awesome.css\"\r\nimport {HelpModal} from \"./modal\";\r\n\r\nexport default class Header extends Component{\r\n    render() {\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick, handleSwapToggle,handleAnimationToggle, frameNumber, referenceInputTextField, resetTurns, animationToggle,swapToggle} = this.props;\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron bg-transparent\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-5\">Simulation of Virtual Memory Paging</h1>\r\n                    <p className=\"lead\">Created By: Jason</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"input-group mb-2\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Enter reference string 0~9 separated with ','\">Reference String</span>\r\n                </div>\r\n                <input type=\"text\" name = \"referenceInputTextField\"  className=\"form-control\" placeholder=\"Reference string [0-9] separated with ','\" value={referenceInputTextField} onChange={handleRefChange.bind(this)}/>\r\n            </div>\r\n            <div className=\"input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Enter number 0~9\">Frame Number</span>\r\n                </div>\r\n                <input ref=\"frameNumber\" type=\"number\" min=\"1\" max=\"9\" className=\"form-control\" placeholder=\"Frame number [0-9]\" value={frameNumber} onChange={handleFrameChange.bind(this)}/>\r\n                <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"addon-wrapping\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"For NRU, enter reset clock 0~9\">Reset Clock</span>\r\n                </div>\r\n                <input ref=\"resetTurns\" type=\"number\" min=\"1\" max=\"9\" className=\"form-control\" placeholder=\"Number of reset turns for NRU [0-9]\" value={resetTurns} onChange={handleResetTurnsChange.bind(this)}/>\r\n            </div>\r\n            <button type=\"button\" className={\"btn btn-danger\"} onClick={handleRefStringGenClick}>Generate String</button>\r\n            <button type=\"button\" className={!swapToggle?\"btn btn-secondary m-2\":\"btn btn-outline-secondary m-2\"} onClick={handleSwapToggle}>{swapToggle?\"Hide swapped out memory\" : \"Show swapped out memory\"}</button>\r\n            <button type=\"button\" className={!animationToggle?\"btn btn-info mr-2\":\"btn btn-outline-info mr-2\"} onClick={handleAnimationToggle}>{animationToggle?\"Turn off animation\" : \"Turn on animation\"}</button>\r\n            <HelpModal/>\r\n        </div>\r\n    )\r\n    }\r\n\r\n}","import React, {Component} from \"react\";\r\nimport _ from \"lodash\";\r\nimport Fade from 'react-reveal/Fade'\r\n\r\nexport default class Table extends Component{\r\n    render() {\r\n        let {referenceString, frameNumber, algorithmLabel, algorithm, colorMap, resetTurns, swapToggle, animationToggle} = this.props;\r\n        let {pageInMemArray, pageFaults, pageNotInMemArray} = algorithm(referenceString, frameNumber, resetTurns);\r\n        let frameNumberArray = _.range(0, frameNumber, 1);\r\n        return(\r\n            <div>\r\n                <label>{algorithmLabel + \":\"}</label>\r\n                <table className=\"table table-bordered table-sm table-custom-style\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Reference:</th>\r\n                            {referenceString.map( r => (\r\n                                animationToggle?\r\n                                <Fade right><th className=\"table-cell-align-center\">{r}</th></Fade>\r\n                            : <th className=\"table-cell-align-center\">{r}</th>\r\n                            ))}\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {frameNumberArray.map( f =>(\r\n                        <tr>\r\n                            <th />\r\n                            {pageInMemArray.map( r => (\r\n                                animationToggle?\r\n                                <Fade right><th className={colorMap.get(r[f]) + \" table-cell-align-center\"}>{r[f]}</th></Fade>\r\n                            : <th className={colorMap.get(r[f]) + \" table-cell-align-center\"}>{r[f]}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                    {swapToggle ? frameNumberArray.map( f =>(\r\n                        <tr className=\"thead-light\">\r\n                            <th />\r\n                            {pageNotInMemArray.map( r => (\r\n                                animationToggle?\r\n                                <Fade right><th className=\"table-cell-align-center\">{r[f]}</th></Fade>\r\n                                    :<th className=\"table-cell-align-center\">{r[f]}</th>\r\n                            ))}\r\n                        </tr>\r\n                    )) : null}\r\n                    <tr className=\"thead-dark\">\r\n                        <th>Page Fault:</th>\r\n                        {pageFaults.map( f => (\r\n                            animationToggle?\r\n                            <Fade right><th className=\"table-cell-align-center\">{f}</th></Fade>\r\n                                :<th className=\"table-cell-align-center\">{f}</th>\r\n                        ))}\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport Table from \"./table\";\r\n\r\n\r\nexport default class Tables extends Component{\r\n    render(){\r\n        let {referenceString, frameNumber, resetTurns, swapToggle, animationToggle, algorithms} = this.props;\r\n        let referenceMap = new Map();\r\n        referenceMap.set(\"0\", \"table-primary\");\r\n        referenceMap.set(\"1\", \"table-secondary\");\r\n        referenceMap.set(\"2\", \"table-info\");\r\n        referenceMap.set(\"3\", \"table-warning\");\r\n        referenceMap.set(\"4\", \"table-danger\");\r\n        referenceMap.set(\"5\", \"table-success\");\r\n        referenceMap.set(\"6\", \"table-add-0\");\r\n        referenceMap.set(\"7\", \"table-add-1\");\r\n        referenceMap.set(\"8\", \"table-add-2\");\r\n        referenceMap.set(\"9\", \"table-add-3\");\r\n        return algorithms.map( a => <Table key={a['name']} colorMap={referenceMap} frameNumber={frameNumber} resetTurns={resetTurns} swapToggle={swapToggle} animationToggle={animationToggle} referenceString={referenceString} algorithmLabel={a['name']} algorithm={a['f']}/>);\r\n    }\r\n}","export function refStringGen(size, range){\r\n    let result = \"\";\r\n    for (let i = 0; i < size ; i++){\r\n        let r = Math.floor((Math.random()*range)).toString();\r\n        result = result + r + \",\";\r\n    }\r\n    result = result.substring(0, result.length-1);\r\n    return result;\r\n}","import React, {Component} from \"react\";\r\n\r\nexport default class List extends Component {\r\n    render(){\r\n        let {algorithms, textProperty, handleListChange, selectedAlgorithm} = this.props;\r\n        return(\r\n            <ul className=\"list-group\">\r\n            {algorithms.map(a=> <a href=\"#\" onClick={()=>handleListChange(a)} className={a['name'] === selectedAlgorithm['name']? \"list-group-item list-group-item-action active\" : \"list-group-item list-group-item-action\"}>{a[textProperty]}</a>) }\r\n            </ul>\r\n        )\r\n    }\r\n};\r\n\r\nList.defaultProps = {\r\n    textProperty: \"name\"\r\n}","import {floor} from \"lodash\";\r\n\r\nexport function firstInFirstOut(referenceString, frameNumber) {\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    for (let i = 0; i < referenceString.length; i++) {\r\n            if (pageInMem.includes(referenceString[i])) {\r\n                pageFaults.push('');                                //No page faults\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);                           //keep no changes\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            } else {\r\n                pageFaults.push('F');                               //Page faults occurs\r\n                if (pageInMem.length < frameNumber) {\r\n                    pageInMem.unshift(referenceString[i]);          //add to the top of the array\r\n                    const pageInMemClone = [...pageInMem];\r\n                    pageInMemArray.push(pageInMemClone);\r\n                    const pageNotInMemClone = [...pageNotInMem];\r\n                    pageNotInMemArray.push(pageNotInMemClone);\r\n                } else {\r\n                    //page replacement algorithm here\r\n                    if (pageNotInMem.length >= frameNumber)\r\n                        pageNotInMem.pop();\r\n                    pageNotInMem.unshift(pageInMem.pop());          //remove the last(oldest) page}\r\n                    pageInMem.unshift(referenceString[i]);           //insert the new page into the top of the array\r\n                    const pageInMemClone = [...pageInMem];\r\n                    pageInMemArray.push(pageInMemClone);                        //insert output into 2d array\r\n                    const pageNotInMemClone = [...pageNotInMem];\r\n                    pageNotInMemArray.push(pageNotInMemClone);\r\n                }\r\n            }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function leastRecentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            pageInMem.splice(pageInMem.indexOf(referenceString[i]),1);\r\n            pageInMem.unshift(referenceString[i]);\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.pop());\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function notRecentlyUsed(referenceString, frameNumber, resetTurns){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => referenceMap.set(e,false));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (i%resetTurns === 0){\r\n            referenceString.forEach( (e) => referenceMap.set(e,false));\r\n        }\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            referenceMap.set(referenceString[i], true);  //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j])===true){\r\n                        referenceMap.set(pageInMem[j], false);    //set reference bit to 0 (second chance)\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber)\r\n                            pageNotInMem.pop();\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        break;\r\n                    }\r\n                }\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function secondChance(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let referenceMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => referenceMap.set(e,false));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            referenceMap.set(referenceString[i], true);  //set reference bit to 1\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                for (let j = frameNumber-1; j >=0 ; j--){\r\n                    if (referenceMap.get(pageInMem[j])===true){\r\n                        referenceMap.set(pageInMem[j], false);    //set reference bit to 0 (second chance)\r\n                    }\r\n                    else\r\n                    {\r\n                        if (pageNotInMem.length >= frameNumber)\r\n                            pageNotInMem.pop();\r\n                        pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(pageInMem[j]),1)[0]);\r\n                        pageInMem.unshift(referenceString[i]);\r\n                        break;\r\n                    }\r\n                }\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function notFrequentlyUsed(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);;\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 1);  //add counter\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}\r\n\r\nexport function aging(referenceString, frameNumber){\r\n    let pageInMem = [];\r\n    let pageFaults = [];\r\n    let pageInMemArray = [];\r\n    let frequentMap = new Map();\r\n    let pageNotInMem = [];\r\n    let pageNotInMemArray = [];\r\n    referenceString.forEach( (e) => frequentMap.set(e,0));\r\n    for (let i = 0; i < referenceString.length ; i++)\r\n    {\r\n        if (pageInMem.includes(referenceString[i])){\r\n            pageFaults.push('');\r\n            const pageInMemClone = [...pageInMem];\r\n            pageInMemArray.push(pageInMemClone);\r\n            const pageNotInMemClone = [...pageNotInMem];\r\n            pageNotInMemArray.push(pageNotInMemClone);\r\n            frequentMap.forEach( (v,k,map) => frequentMap.set(k, floor(v/2) ));\r\n            frequentMap.set(referenceString[i], frequentMap.get(referenceString[i]) + 256);\r\n        }\r\n        else{\r\n            pageFaults.push('F');\r\n            frequentMap.forEach( (v,k,map) => frequentMap.set(k, floor(v/2) ));\r\n\r\n            if (pageInMem.length < frameNumber){\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n            else{\r\n                //page replacement algorithm here\r\n                let lowestCount = frequentMap.get(pageInMem[frameNumber - 1]);\r\n                let lowestCountHolder = pageInMem[frameNumber - 1];\r\n                for (let count = frameNumber - 2; count >= 0; count--){\r\n                    if (frequentMap.get(pageInMem[count]) < lowestCount){\r\n                        lowestCount = frequentMap.get(pageInMem[count]);\r\n                        lowestCountHolder = pageInMem[count];\r\n                    }\r\n                }\r\n                if (pageNotInMem.length >= frameNumber)\r\n                    pageNotInMem.pop();\r\n                pageNotInMem.unshift(pageInMem.splice(pageInMem.indexOf(lowestCountHolder),1)[0]);\r\n                pageInMem.unshift(referenceString[i]);\r\n                const pageInMemClone = [...pageInMem];\r\n                pageInMemArray.push(pageInMemClone);\r\n                const pageNotInMemClone = [...pageNotInMem];\r\n                pageNotInMemArray.push(pageNotInMemClone);\r\n            }\r\n        }\r\n    }\r\n    return {pageInMemArray, pageFaults, pageNotInMemArray};\r\n}","import React, {Component} from 'react';\r\nimport Header from \"./component/header\";\r\nimport Tables from \"./component/tables\";\r\nimport {refStringGen} from \"./utils/randomRefStringGen\";\r\nimport \"font-awesome/css/font-awesome.css\"\r\n\r\nimport List from \"./component/list\";\r\nimport {\r\n    aging,\r\n    firstInFirstOut,\r\n    leastRecentlyUsed,\r\n    notFrequentlyUsed,\r\n    notRecentlyUsed,\r\n    secondChance\r\n} from \"./algorithms\";\r\n\r\nclass App extends Component{\r\n    state = {\r\n        referenceInputTextField : \"0,2,3,1,2,1,4,5,6,2,4,5,3,2,3,8,5,7,2,0,6,4,1,9\",\r\n        referenceString : [\"0\", \"2\", \"3\", \"1\", \"2\", \"1\", \"4\", \"5\", \"6\", \"2\", \"4\", \"5\", \"3\", \"2\", \"3\", \"8\", \"5\", \"7\", \"2\", \"0\", \"6\", \"4\", \"1\", \"9\"],\r\n        frameNumber : 4,\r\n        resetTurns: 4,\r\n        swapToggle: false,\r\n        animationToggle: true,\r\n        selectedAlgorithm: {name: \"All Algorithms\"},\r\n    }\r\n\r\n    handleRefChange = ({target}) => {\r\n        let {value} = target;\r\n        if (value.match(/^$|^[0-9,]+$/) && !value.match(/,,+,*|[0-9][0-9]+[0-9]*/g)) {\r\n                let tempReferenceString = [...value.split(\",\")];\r\n                let filteredReferenceString = tempReferenceString.filter((value, index, array) => value !== \"\");\r\n                this.setState({referenceInputTextField: value, referenceString: filteredReferenceString});\r\n        }\r\n    }\r\n\r\n    handleFrameChange = ({target}) =>{\r\n        if(target.value < 10)\r\n            this.setState({frameNumber: target.value});\r\n    }\r\n\r\n    handleResetTurnsChange = ({target}) => {\r\n        if (target.value < 10)\r\n            this.setState({resetTurns: target.value});\r\n    }\r\n\r\n    handleSwapToggle = () => {\r\n        this.setState({swapToggle: !this.state.swapToggle});\r\n    }\r\n\r\n    handleRefStringGenClick = () => {\r\n        let tempReferenceStringInput =  refStringGen(24,9);\r\n        let tempReferenceString = [...tempReferenceStringInput.split(\",\")];\r\n        let filteredReferenceString = tempReferenceString.filter((value, index, array) => value !== \"\");\r\n        this.setState({referenceInputTextField: tempReferenceStringInput, referenceString: filteredReferenceString});\r\n    }\r\n\r\n    handleAnimationToggle = () =>{\r\n        this.setState({animationToggle: !this.state.animationToggle});\r\n    }\r\n\r\n    handleListChange = (algorithm) => {\r\n        this.setState({selectedAlgorithm:algorithm});\r\n    }\r\n\r\n\r\n    render() {\r\n        let {frameNumber, resetTurns, referenceString, referenceInputTextField, swapToggle, animationToggle, selectedAlgorithm} = this.state;\r\n        let {handleRefChange, handleFrameChange, handleResetTurnsChange, handleRefStringGenClick, handleAnimationToggle, handleSwapToggle, handleListChange} = this;\r\n        const algorithms = [\r\n            {name : \"All Algorithms\"},\r\n            {name : \"First In First Out\", f : firstInFirstOut},\r\n            {name : \"Second Chance\", f : secondChance},\r\n            {name : \"Least Recently Used\", f : leastRecentlyUsed},\r\n            {name : \"Not Recently Used\", f : notRecentlyUsed},\r\n            {name : \"Not Frequently Used\", f : notFrequentlyUsed},\r\n            {name : \"Aging\", f : aging}]\r\n        const filteredAlgorithm = selectedAlgorithm && selectedAlgorithm['f']? algorithms.filter(a => a['name'] === selectedAlgorithm['name']) : algorithms.filter(a=> a['name'] !== \"All Algorithms\");\r\n        return (\r\n            <main className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <Header\r\n                            handleRefChange={handleRefChange}\r\n                            handleFrameChange={handleFrameChange}\r\n                            handleResetTurnsChange={handleResetTurnsChange}\r\n                            handleRefStringGenClick={handleRefStringGenClick}\r\n                            handleSwapToggle={handleSwapToggle}\r\n                            handleAnimationToggle={handleAnimationToggle}\r\n                            frameNumber={frameNumber}\r\n                            resetTurns={resetTurns}\r\n                            referenceInputTextField={referenceInputTextField}\r\n                            animationToggle={animationToggle}\r\n                            swapToggle={swapToggle}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-3 pt-lg-4\">\r\n                        <List algorithms={algorithms} handleListChange={handleListChange} selectedAlgorithm={selectedAlgorithm}/>\r\n                    </div>\r\n                </div>\r\n                    <div>\r\n                        <Tables\r\n                        frameNumber={frameNumber}\r\n                        resetTurns={resetTurns}\r\n                        referenceString={referenceString}\r\n                        swapToggle={swapToggle}\r\n                        animationToggle={animationToggle}\r\n                        algorithms={filteredAlgorithm}\r\n                    />\r\n                    </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/custom-style.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n        <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}